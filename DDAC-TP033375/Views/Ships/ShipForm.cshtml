@model DDAC_TP033375.ViewModels.ShipFormViewModel

@{
	ViewBag.Title = ViewBag.Title;
	var columnWidth = ViewBag.Action.Equals("Update") ? "col-md-6" : "col-md-12";
}

@if (ViewBag.IsSuccess != null)
{
	if (ViewBag.IsSuccess)
	{
		<div class="alert alert-dismissible alert-success">
			<button type="button" class="close" data-dismiss="alert">&times;</button>
			@ViewBag.Message @Html.ActionLink("Go to Ship Index", "Index", new { }, new { @class = "alert-link" })
		</div>
	}
	else
	{
		<div class="alert alert-dismissible alert-danger">
			<button type="button" class="close" data-dismiss="alert">&times;</button>
			@ViewBag.Message
		</div>
	}
}

<h2>@ViewBag.Title</h2>

<div class="row">
	@if (ViewBag.Action.Equals("Update"))
	{
		<div class="col-md-6">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h3 class="panel-title">Ship</h3>
				</div>
				<div class="panel-body">
					<div class="row">
						<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.Name)</strong></div>
						<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.Name)</div>
					</div>
					<div class="row">
						<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.NumberOfContainerBay)</strong></div>
						<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.NumberOfContainerBay)</div>
					</div>
					<div class="row">
						<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.NumberOfAvailableContainerBay)</strong></div>
						<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.NumberOfAvailableContainerBay)</div>
					</div>
				</div>
			</div>
			@if (Model.Ship.IsScheduled)
			{
				<div class="panel panel-info">
					<div class="panel-heading">
						<h3 class="panel-title">Schedule</h3>
					</div>
					<div class="panel-body">
						<div class="row">
							<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.Schedule.Origin)</strong></div>
							<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.Schedule.Origin)</div>
						</div>
						<div class="row">
							<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.Schedule.Destination)</strong></div>
							<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.Schedule.Destination)</div>
						</div>
						<div class="row">
							<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.Schedule.DepartureTime)</strong></div>
							<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.Schedule.DepartureTime)</div>
						</div>
						<div class="row">
							<div class="col-xs-5" style="text-align: right"><strong>@Html.DisplayNameFor(s => s.Ship.Schedule.ArrivalTime)</strong></div>
							<div class="col-xs-7">@Html.DisplayFor(s => s.Ship.Schedule.ArrivalTime)</div>
						</div>
					</div>
				</div>
			}
			else
			{
				<div class="panel panel-danger">
					<div class="panel-heading">
						<h3 class="panel-title">
							<span class="glyphicon glyphicon-remove-sign" style="text-align: center; font-size: medium" aria-hidden="true"></span> No Schedule Assigned!
						</h3>
					</div>
					<div class="panel-body">
					</div>
				</div>
			}
		</div>
	}
	<div class="@columnWidth">
		@using (Html.BeginForm((string)@ViewBag.Action, "Ships", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
		{
			<div class="well">
				@Html.HiddenFor(s => s.Ship.Id)
				@Html.AntiForgeryToken()
				@Html.ValidationSummary("", new { @class = "text-danger" })
				<div class="form-group">
					@Html.LabelFor(s => s.Ship.Name, new { @class = "col-md-5 control-label" })
					<div class="col-md-7">
						@Html.TextBoxFor(s => s.Ship.Name, new { @class = "form-control" })
					</div>
				</div>
				<div class="form-group">
					@Html.LabelFor(s => s.Ship.NumberOfContainerBay, new { @class = "col-md-5 control-label" })
					<div class="col-md-7">
						@Html.TextBoxFor(s => s.Ship.NumberOfContainerBay, new { @class = "form-control" })
					</div>
				</div>
				<div class="form-group">
					<label class="col-md-5 control-label" for="Ship_Schedule_Origin">Origin</label>
					<div class="col-md-7">
						@Html.DropDownListFor(s => s.Ship.Schedule.Origin,
												new SelectList(Model.Schedules, "Id", "Origin"),
												"-- From --", new { @class = "form-control", @onchange = "FillDestination()" })
					</div>
				</div>
				<div class="form-group">
					<label class="col-md-5 control-label" for="Ship_Schedule_Destination">Destination</label>
					<div class="col-md-7">
						@Html.DropDownListFor(s => s.Ship.Schedule.Destination,
												new SelectList(Enumerable.Empty<SelectListItem>(), "Id", "Destination"),
												"-- To --", new { @class = "form-control", @onchange = "FillTime()" })
					</div>
				</div>
				<div class="form-group">
					<label class="col-md-5 control-label" for="Ship_ScheduleId">Departure Time (MM/DD/YYYY)</label>
					<div class="col-md-7">
						@Html.DropDownListFor(s => s.Ship.ScheduleId,
												new SelectList(Enumerable.Empty<SelectListItem>(), "Id", "DepartureTime"),
												"-- Time Available --", new { @class = "form-control" })
					</div>
				</div>
				<div class="form-group">
					<div class="col-md-5" style="text-align: right">
						@Html.ActionLink("Cancel", "Index", new { }, new { @class = "btn btn-default" })
					</div>
					<div class="col-md-7">
						<input type="submit" class="btn btn-success" value="@ViewBag.Action" />
					</div>
				</div>
			</div>
		}
	</div>
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")

	<script>
		function FillDestination() {
			var origin = $('#Ship_Schedule_Origin :selected').text();
			$.ajax({
				url: '@Url.Action("FillDestination")',
				type: "GET",
				dataType: "JSON",
				data: { origin: origin },
				success: function (destinations) {
					$("#Ship_Schedule_Destination").html("").append(
						$('<option></option>').val('').html("-- To --")); // clear before appending new list
					$.each(destinations, function (i, destination) {
						$("#Ship_Schedule_Destination").append(
							$('<option></option>').val(destination.Id).html(destination.Destination));
					});
				}
			});
		}

		function FillTime() {
			var origin = $('#Ship_Schedule_Origin :selected').text();
			var destination = $('#Ship_Schedule_Destination :selected').text();
			$.ajax({
				url: '@Url.Action("FillTime")',
				type: "GET",
				dataType: "JSON",
				data: {
					origin: origin,
					destination: destination
				},
				success: function (schedules) {
					$("#Ship_ScheduleId").html("").append(
						$('<option></option>').val('').html("-- Time Available --")); // clear before appending new list
					$.each(schedules, function (i, schedule) {
						$("#Ship_ScheduleId").append(
							$('<option></option>').val(schedule.Id).html(JsonToJSTime(schedule.DepartureTime)));
					});
				}
			});
		}

		function JsonToJSTime(jsonDateTime) {
			var jsDate = new Date(jsonDateTime.match(/\d+/)[0] * 1); // Convert json to javascript datetime format

			var date = jsDate.getDate();
			var month = jsDate.getMonth() + 1;
			var hours = jsDate.getHours();
			var minutes = jsDate.getMinutes();
			var ampm = hours >= 12 ? 'PM' : 'AM';

			date = date < 10 ? '0' + date : date; // the date 0-9 should be 01-09
			month = month < 10 ? '0' + month : month; // the month 0-9 should be 01-09
			hours = hours % 12;
			hours = hours ? hours : 12; // the hour '0' should be '12'
			minutes = minutes < 10 ? '0' + minutes : minutes; // the minutes 0-9 should be 01-09

			var strTime = hours + ':' + minutes + ' ' + ampm;

			return month + "/" + date + "/" + jsDate.getFullYear() + "  " + strTime;
		}
	</script>
}
